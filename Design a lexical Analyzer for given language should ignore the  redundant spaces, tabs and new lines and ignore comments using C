.#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#define MAX_TOKEN_LENGTH 100

typedef enum {
    TOKEN_IDENTIFIER,
    TOKEN_NUMBER,
    TOKEN_OPERATOR,
    TOKEN_COMMENT,
    TOKEN_UNKNOWN,
    TOKEN_EOF
} TokenType;

typedef struct {
    TokenType type;
    char value[MAX_TOKEN_LENGTH];
} Token;

void skipWhitespace(FILE *file) {
    char ch;
    while ((ch = fgetc(file)) != EOF) {
        if (!isspace(ch)) {
            ungetc(ch, file);
            break;
        }
    }
}

Token getNextToken(FILE *file) {
    Token token;
    char ch = fgetc(file);

    if (ch == EOF) {
        token.type = TOKEN_EOF;
        strcpy(token.value, "EOF");
        return token;
    }

    if (isalpha(ch)) {
        int i = 0;
        token.type = TOKEN_IDENTIFIER;
        do {
            token.value[i++] = ch;
            ch = fgetc(file);
        } while (isalnum(ch) && i < MAX_TOKEN_LENGTH - 1);
        token.value[i] = '\0';
        ungetc(ch, file);
        return token;
    }

    if (isdigit(ch)) {
        int i = 0;
        token.type = TOKEN_NUMBER;
        do {
            token.value[i++] = ch;
            ch = fgetc(file);
        } while (isdigit(ch) && i < MAX_TOKEN_LENGTH - 1);
        token.value[i] = '\0';
        ungetc(ch, file);
        return token;
    }

    if (ch == '/') {
        ch = fgetc(file);
        if (ch == '/') {
            token.type = TOKEN_COMMENT;
           while ((ch = fgetc(file)) != EOF && ch != '\n');
Output: 
main is keyword 
int is keyword 
a is indentifier 
b is indentifier 
c is indentifier 
c is indentifier 
= is operator 
b is indentifier 
+ is operator 
c is indentifier 
printf is keyword 
% is operator 
d is indentifier 
c is indentifier
